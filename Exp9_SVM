import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Create a dataset
data = {
    "Study_Hours": [5, 10, 3, 8, 6, 9, 2, 7, 4, 12],
    "Sleep_Hours": [6, 7, 5, 8, 7, 6, 4, 7, 5, 8],
    "Attendance": [90, 95, 80, 85, 88, 92, 75, 89, 78, 96],
    "Past_Performance": [80, 85, 70, 75, 78, 82, 65, 79, 72, 90],
    "Result": ["Pass", "Pass", "Fail", "Pass", "Pass", "Pass", "Fail", "Pass", "Fail", "Pass"]
}

df = pd.DataFrame(data)

# Step 2: Preprocess the data
label_encoder = LabelEncoder()
df["Result"] = label_encoder.fit_transform(df["Result"])  # Pass=1, Fail=0

# Separate features and target
X = df.drop("Result", axis=1)
y = df["Result"]

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Step 3: Train SVM model
svm_model = SVC(kernel="rbf", random_state=42)
svm_model.fit(X_train, y_train)

# Step 4: Evaluate the model
y_pred = svm_model.predict(X_test)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Step 5: Predict new student result
# Example: [Study_Hours, Sleep_Hours, Attendance, Past_Performance]
new_student = [[7, 7, 90, 80]]  # Define new student input

new_student_df = pd.DataFrame(new_student, columns=X.columns)
new_student_scaled = scaler.transform(new_student_df)

predicted_result = svm_model.predict(new_student_scaled)
predicted_label = label_encoder.inverse_transform(predicted_result)

print("\nPredicted Result for New Student:", predicted_label[0])
