import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the dataset (simulated example dataset)
data = {
    "Years_Experience": [1, 3, 5, 2, 7, 9, 6, 4, 8, 10],
    "Education_Level": [12, 14, 16, 12, 18, 20, 16, 14, 18, 20],  # Number of years of education
    "Age": [22, 25, 28, 23, 30, 32, 29, 26, 31, 33],
    "Salary": [35000, 45000, 60000, 40000, 75000, 85000, 70000, 50000, 80000, 90000]
}

# Step 2: Data Preprocessing
df = pd.DataFrame(data)
print("Dataset:\n", df)

# Define the independent variables (features) and the dependent variable (target)
X = df[["Years_Experience", "Education_Level", "Age"]]
y = df["Salary"]

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train the Multiple Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Make predictions
y_pred = model.predict(X_test)

# Step 6: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("\nModel Coefficients:", model.coef_)
print("Model Intercept:", model.intercept_)
print(f"Mean Squared Error: {mse:.2f}")
print(f"R^2 Score: {r2:.2f}")

# Step 7: Visualize predictions vs actual
plt.scatter(y_test, y_pred, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel("Actual Salary")
plt.ylabel("Predicted Salary")
plt.title("Actual vs Predicted Salaries")
plt.show()
