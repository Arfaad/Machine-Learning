# Import required libraries
import pandas as pd
import numpy as np
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Create a dataset
data = {
    'Age': [22, 25, 47, 52, 46, 56, 21, 23, 57, 48],
    'Income': [20000, 25000, 47000, 52000, 46000, 56000, 21000, 23000, 57000, 48000],
    'Online Activity (hours/week)': [15, 12, 20, 25, 18, 30, 10, 12, 28, 22],
    'Purchased': ['No', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'Yes']
}

# Convert the data into a DataFrame
df = pd.DataFrame(data)

# Encode the target variable
df['Purchased'] = df['Purchased'].map({'Yes': 1, 'No': 0})

# Define features and target
X = df[['Age', 'Income', 'Online Activity (hours/week)']]
y = df['Purchased']

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train the model
model = GaussianNB()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:\n", classification_report(y_test, y_pred))

# Predict for new data
new_data = pd.DataFrame([[30, 30000, 18]], columns=['Age', 'Income', 'Online Activity (hours/week)'])
predicted_outcome = model.predict(new_data)
print("Predicted Outcome (1=Yes, 0=No):", predicted_outcome[0])
